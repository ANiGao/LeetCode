package other;

public class LC_31 {
}

/*
 思路及解法

 1.注意到下一个排列总是比当前排列要大，除非该排列已经是最大的排列。
 我们希望找到一种方法，能够找到一个大于当前序列的新序列，且变大的幅度尽可能小。具体地：

    1).我们需要将一个左边的「较小数」与一个右边的「较大数」交换，以能够让当前排列变大，从而得到下一个排列。

    2).同时我们要让这个「较小数」尽量靠右，而「较大数」尽可能小。当交换完成后，
    「较大数」右边的数需要按照升序重新排列。这样可以在保证新排列大于原来排列的情况下，使变大的幅度尽可能小。

 2.以排列 [4,5,2,6,3,1] 为例：

    1).我们能找到的符合条件的一对「较小数」与「较大数」的组合为 22 与 33，
    满足「较小数」尽量靠右，而「较大数」尽可能小。

    2).当我们完成交换后排列变为 [4,5,3,6,2,1]，
    此时我们可以重排「较小数」右边的序列，序列变为 [4,5,3,1,2,6]。

 3.具体地，我们这样描述该算法，对于长度为 nn 的排列 aa：

    1).首先从后向前查找第一个顺序对 (i,i+1)，满足 a[i]<a[i+1]。这样「较小数」即为 a[i]。
    此时 [i+1,n) 必然是下降序列。

    2).如果找到了顺序对，那么在区间 [i+1,n) 中从后向前查找第一个元素 j 满足 a[i] < a[j]。
    这样「较大数」即为 a[j]。

    3).交换 a[i] 与 a[j]，此时可以证明区间 [i+1,n) 必为降序。
    我们可以直接使用双指针反转区间 [i+1,n) 使其变为升序，而无需对该区间进行排序

 */
class Solution_31 {
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        boolean flag = false;
        for (int i = n - 1; i > 0; i--) {
            //首先从后向前查找第一个顺序对 (i,i+1)，满足 a[i]<a[i+1]。这样「较小数」即为 a[i]。
            //    此时 [i+1,n) 必然是下降序列。
            if (nums[i - 1] < nums[i]) {
                //如果找到了顺序对，那么在区间 [i+1,n) 中从后向前查找第一个元素 j 满足 a[i] < a[j]。
                //    这样「较大数」即为 a[j]。
                for (int j = n - 1; j > i - 1; j--) {
                    if (nums[i - 1] < nums[j]) {
                        //交换 a[i] 与 a[j]，此时可以证明区间 [i+1,n) 必为降序。
                        swap(nums, i - 1, j);
                        //我们可以直接使用双指针反转区间 [i+1,n) 使其变为升序，而无需对该区间进行排序
                        reverse(nums, i);
                        flag = true;
                        break;
                    }
                }
                break;
            }
        }
        if (!flag) {
            reverse(nums, 0);
        }
    }

    public void swap(int a[], int i, int j) {
        int t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    public void reverse(int a[], int l) {
        int r = a.length - 1;
        while (l < r) {
            swap(a, l, r);
            l++;
            r--;
        }
    }
}